{"ast":null,"code":"var _jsxFileName = \"/Users/robertnixon/Desktop/TKrecipes/PersonalWebsite/rhanixon.github.io/src/Writing.js\";\n\n/* eslint-disable react/jsx-no-target-blank */\nimport React, { Component } from \"react\";\nimport { withRouter, Route, Switch } from \"react-router-dom\";\nexport default class Writing extends Component {\n  handleClick() {\n    // window.open(\"/insert/your/path/here\");\n    window.location.href = \"/fast\";\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"writing-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bio-header-black-bg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, \"Writing\")), React.createElement(\"div\", {\n      className: \"boxed2-black-bg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bio-item-black-bg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, \"I Wanna Go Fast\"), React.createElement(\"h3\", {\n      className: \"oneandquarter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, \"This spring, while my teammates and I were working on Hive Mind - a real-time, multi-player, cross-platform mobile application based on the New York Times Spelling Bee - we ran into an interesting problem. Given a dictionary containing all the words in the english language, generate all possible solutions for all possible puzzles in our game. At first glance this problem may seem trivial. But things start to get crazy when you factor in the fact that there are 4,604,600 possible puzzles each of which may contain as many as 1,000 valid words. Our first pass at solving the problem itterativley would have taken over 6 hours to run if we were willing to subject our computers to that kidn of torture. So the question quickly became: how can we possibly make this faster? And after that, how fast can we possibly make this thing?\"), React.createElement(\"a\", {\n      className: \"zero\",\n      href: \"#fast\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"black-bg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Check it out \", React.createElement(\"i\", {\n      className: \"black-bg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }))), React.createElement(\"button\", {\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Check it out\"))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"arrow-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      \"data-scroll\": true,\n      href: \"#fast\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"arrow\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/robertnixon/Desktop/TKrecipes/PersonalWebsite/rhanixon.github.io/src/Writing.js"],"names":["React","Component","withRouter","Route","Switch","Writing","handleClick","window","location","href","render"],"mappings":";;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,EAAqBC,KAArB,EAA4BC,MAA5B,QAA0C,kBAA1C;AACA,eAAe,MAAMC,OAAN,SAAsBJ,SAAtB,CAAgC;AAC7CK,EAAAA,WAAW,GAAG;AACZ;AACAC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,OAAvB;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CADF,EAIE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE;AAAI,MAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,00BAFF,EAiBE;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,MAAA,IAAI,EAAC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACe;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADf,CADF,CAjBF,EAsBE;AAAQ,MAAA,OAAO,EAAE,KAAKJ,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAtBF,CADF,CAJF,EA8BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,yBAAH;AAAe,MAAA,IAAI,EAAC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CA9BF,CADF;AAwCD;;AA9C4C","sourcesContent":["/* eslint-disable react/jsx-no-target-blank */\nimport React, { Component } from \"react\";\nimport { withRouter, Route, Switch } from \"react-router-dom\";\nexport default class Writing extends Component {\n  handleClick() {\n    // window.open(\"/insert/your/path/here\");\n    window.location.href = \"/fast\";\n  }\n  render() {\n    return (\n      <div className=\"writing-container\">\n        <div className=\"bio-header-black-bg\">\n          <h1>Writing</h1>\n        </div>\n        <div className=\"boxed2-black-bg\">\n          <div className=\"bio-item-black-bg\">\n            <h2>I Wanna Go Fast</h2>\n            <h3 className=\"oneandquarter\">\n              This spring, while my teammates and I were working on Hive Mind -\n              a real-time, multi-player, cross-platform mobile application based\n              on the New York Times Spelling Bee - we ran into an interesting\n              problem. Given a dictionary containing all the words in the\n              english language, generate all possible solutions for all possible\n              puzzles in our game. At first glance this problem may seem\n              trivial. But things start to get crazy when you factor in the fact\n              that there are 4,604,600 possible puzzles each of which may\n              contain as many as 1,000 valid words. Our first pass at solving\n              the problem itterativley would have taken over 6 hours to run if\n              we were willing to subject our computers to that kidn of torture.\n              So the question quickly became: how can we possibly make this\n              faster? And after that, how fast can we possibly make this thing?\n            </h3>\n            <a className=\"zero\" href=\"#fast\">\n              <h3 className=\"black-bg\">\n                Check it out <i className=\"black-bg\"></i>\n              </h3>\n            </a>\n            <button onClick={this.handleClick}>Check it out</button>\n          </div>\n        </div>\n        <div>\n          <div className=\"arrow-container\">\n            <a data-scroll href=\"#fast\">\n              <div className=\"arrow\"></div>\n            </a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}