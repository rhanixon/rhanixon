{"ast":null,"code":"var _jsxFileName = \"/Users/robertnixon/Desktop/PersonalWebsite/rhanixon.github.io/src/components/Portfolio.js\";\n\n/* eslint-disable react/jsx-no-target-blank */\nimport React, { Component } from \"react\";\nimport Sidebar from \"./Sidebar\";\nexport default class Portfolio extends Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    }, React.createElement(Sidebar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"portfolio-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bio-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, \"Portfolio\")), React.createElement(\"div\", {\n      className: \"boxed2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bio-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, \"Hive Mind\"), React.createElement(\"h3\", {\n      className: \"oneandquarter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, \"A real-time, multi-player, cross-platform mobile application based on the New York Times Spelling Bee game developed in 3 weeks. Deployed on Heroku and designed with React Native, React Hooks, Redux, Express, PostgreSQL, and Socket.io. UI/UX with interactive data visualizations using React Native and D3. Back-end architecture written in TypeScript. Algorithm to generate solutions for all possible puzzles within 2 seconds created using bitmaps and linear algebra. You can check out some writing on this project by clicking the arrow below.\"), React.createElement(\"a\", {\n      className: \"zero\",\n      href: \"https://expo.io/@hivemind/hive-mind?release-channel=prod\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"Check it out \", React.createElement(\"i\", {\n      className: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }))), React.createElement(\"a\", {\n      className: \"one\",\n      href: \"https://github.com/hive-mind-fs/hive-mind\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"Source Code \", React.createElement(\"i\", {\n      className: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }))), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Fullstack Records\"), React.createElement(\"h3\", {\n      className: \"oneandquarter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, \"A fully functional e-commerce web application developed in 9 days using React-Redux, Node, Express, PostgreSQL, Google OAuth, and Stripe integration. RESTful API routes enable a persistent shopping cart. Custom application logic synchronizes front-end orders with back-end inventory preventing users from placing orders on unavailable items. Time-Series data on user-product interactions tracked using custom algorithm.\"), React.createElement(\"a\", {\n      className: \"two\",\n      href: \"https://recordshop1982134.herokuapp.com/products\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Check it out \", React.createElement(\"i\", {\n      className: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }))), React.createElement(\"a\", {\n      className: \"three\",\n      href: \"https://github.com/rhanixon/FullstackRecords\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Source Code \", React.createElement(\"i\", {\n      className: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }))))), React.createElement(\"div\", {\n      className: \"arrow-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      \"data-scroll\": true,\n      href: \"#writing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"arrow-black\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"writing\",\n      id: \"writing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"writing-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bio-header-black-bg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Writing\")), React.createElement(\"div\", {\n      className: \"boxed2-black-bg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bio-item-black-bg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"I Wanna Go Fast\"), React.createElement(\"h3\", {\n      className: \"oneandquarter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"This spring, while my teammates and I were working on Hive Mind - a real-time, multi-player, cross-platform mobile application based on the New York Times Spelling Bee - we ran into an interesting problem. Given a dictionary containing all the words in the english language, generate all possible solutions for all possible puzzles in our game. At first glance this problem may seem trivial. But things start to get crazy when you factor in the fact that there are 4,604,600 possible puzzles each of which may contain as many as 1,000 valid words. Our first pass at solving the problem itterativley would have taken over 6 hours to run if we were willing to subject our computers to that kidn of torture. So the question quickly became: how can we possibly make this faster? And after that, how fast can we possibly make this thing?\"), React.createElement(\"a\", {\n      className: \"zero\",\n      href: \"/Fast\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"black-bg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Check it out \", React.createElement(\"i\", {\n      className: \"black-bg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }))))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/robertnixon/Desktop/PersonalWebsite/rhanixon.github.io/src/components/Portfolio.js"],"names":["React","Component","Sidebar","Portfolio","render"],"mappings":"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","sourcesContent":["/* eslint-disable react/jsx-no-target-blank */\nimport React, { Component } from \"react\";\nimport Sidebar from \"./Sidebar\";\nexport default class Portfolio extends Component {\n  render() {\n    return (\n      <div>\n        <Sidebar />\n        <div className=\"portfolio-container\">\n          <div className=\"bio-header\">\n            <h1>Portfolio</h1>\n          </div>\n          <div className=\"boxed2\">\n            <div className=\"bio-item\">\n              <h2>Hive Mind</h2>\n              <h3 className=\"oneandquarter\">\n                A real-time, multi-player, cross-platform mobile application\n                based on the New York Times Spelling Bee game developed in 3\n                weeks. Deployed on Heroku and designed with React Native, React\n                Hooks, Redux, Express, PostgreSQL, and Socket.io. UI/UX with\n                interactive data visualizations using React Native and D3.\n                Back-end architecture written in TypeScript. Algorithm to\n                generate solutions for all possible puzzles within 2 seconds\n                created using bitmaps and linear algebra. You can check out some\n                writing on this project by clicking the arrow below.\n              </h3>\n              <a\n                className=\"zero\"\n                href=\"https://expo.io/@hivemind/hive-mind?release-channel=prod\"\n              >\n                <h3>\n                  Check it out <i className=\"right\"></i>\n                </h3>\n              </a>\n              <a\n                className=\"one\"\n                href=\"https://github.com/hive-mind-fs/hive-mind\"\n              >\n                <h3>\n                  Source Code <i className=\"right\"></i>\n                </h3>\n              </a>\n              <h2>Fullstack Records</h2>\n              <h3 className=\"oneandquarter\">\n                A fully functional e-commerce web application developed in 9\n                days using React-Redux, Node, Express, PostgreSQL, Google OAuth,\n                and Stripe integration. RESTful API routes enable a persistent\n                shopping cart. Custom application logic synchronizes front-end\n                orders with back-end inventory preventing users from placing\n                orders on unavailable items. Time-Series data on user-product\n                interactions tracked using custom algorithm.\n              </h3>\n              <a\n                className=\"two\"\n                href=\"https://recordshop1982134.herokuapp.com/products\"\n              >\n                <h3>\n                  Check it out <i className=\"right\"></i>\n                </h3>\n              </a>\n              <a\n                className=\"three\"\n                href=\"https://github.com/rhanixon/FullstackRecords\"\n              >\n                <h3>\n                  Source Code <i className=\"right\"></i>\n                </h3>\n              </a>\n            </div>\n          </div>\n          <div className=\"arrow-container\">\n            <a data-scroll href=\"#writing\">\n              <div className=\"arrow-black\"></div>\n            </a>\n          </div>\n        </div>\n        <div className=\"writing\" id=\"writing\">\n          <div className=\"writing-container\">\n            <div className=\"bio-header-black-bg\">\n              <h1>Writing</h1>\n            </div>\n            <div className=\"boxed2-black-bg\">\n              <div className=\"bio-item-black-bg\">\n                <h2>I Wanna Go Fast</h2>\n                <h3 className=\"oneandquarter\">\n                  This spring, while my teammates and I were working on Hive\n                  Mind - a real-time, multi-player, cross-platform mobile\n                  application based on the New York Times Spelling Bee - we ran\n                  into an interesting problem. Given a dictionary containing all\n                  the words in the english language, generate all possible\n                  solutions for all possible puzzles in our game. At first\n                  glance this problem may seem trivial. But things start to get\n                  crazy when you factor in the fact that there are 4,604,600\n                  possible puzzles each of which may contain as many as 1,000\n                  valid words. Our first pass at solving the problem\n                  itterativley would have taken over 6 hours to run if we were\n                  willing to subject our computers to that kidn of torture. So\n                  the question quickly became: how can we possibly make this\n                  faster? And after that, how fast can we possibly make this\n                  thing?\n                </h3>\n                <a className=\"zero\" href=\"/Fast\">\n                  <h3 className=\"black-bg\">\n                    Check it out <i className=\"black-bg\"></i>\n                  </h3>\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}